// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Model User
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts         Account[]
  workspaces       WorkspaceMember[]
  invitations      Invitation[]
  messages         Message[]
  documentContents DocumentContent[]

  createdDocuments Document[] @relation("DocumentCreator")
  updatedDocuments Document[] @relation("DocumentEditor")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Model Workspace
model Workspace {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  emoji      String?
  coverImage String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  members       WorkspaceMember[]
  documents     Document[]
  chat          Conversation?
  invitations   Invitation[]
  notifications Notification[]

  @@unique([name])
}

// Model WorkspaceMember
model WorkspaceMember {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @db.ObjectId
  workspaceId String @db.ObjectId
  role        Role

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MEMBER
}

// Model Invitation
model Invitation {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  email       String
  role        Role
  workspaceId String           @db.ObjectId
  invitedById String           @db.ObjectId
  status      InvitationStatus @default(PENDING)

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  invitedBy User      @relation(fields: [invitedById], references: [id], onDelete: Cascade)

  @@unique([email, workspaceId])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// Model Document
model Document {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  emoji            String?
  coverImage       String?
  documentContents DocumentContent[]
  updatedAt        DateTime          @updatedAt
  createdAt        DateTime          @default(now())
  createdById      String            @db.ObjectId
  workspaceId      String            @db.ObjectId
  updatedById      String?           @db.ObjectId

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdBy User      @relation("DocumentCreator", fields: [createdById], references: [id])
  updatedBy User?     @relation("DocumentEditor", fields: [updatedById], references: [id])
}

// Model DocumentHistory
model DocumentContent {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  documentId String   @db.ObjectId
  content    Json
  editedAt   DateTime @default(now())
  editedById String   @db.ObjectId

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  editedBy User     @relation(fields: [editedById], references: [id], onDelete: Cascade)
}

// Model Conversation (Group Chat per Workspace)
model Conversation {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  workspaceId String    @unique @db.ObjectId
  messages    Message[]

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

// Model Message
model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  body           String
  senderId       String   @db.ObjectId
  conversationId String   @db.ObjectId
  createdAt      DateTime @default(now())

  sender       User         @relation(fields: [senderId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

// Model Notification
model Notification {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  workspaceId String           @db.ObjectId
  message     String
  type        NotificationType
  createdAt   DateTime         @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  WORKSPACE_UPDATE
  DOCUMENT_CREATE
  DOCUMENT_UPDATE
  DOCUMENT_DELETE
}
