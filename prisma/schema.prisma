// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Model User
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts          Account[]
  workspaces        WorkspaceMember[]
  invitations       Invitation[]
  messages          Message[]
  documentContents  DocumentContent[]
  meetings          Meeting[]          @relation("MeetingCreator")
  meetingAttendees  MeetingAttendee[]
  notificationReads NotificationRead[]

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("MessageSeen", fields: [seenMessageIds], references: [id])

  createdDocuments Document[] @relation("DocumentCreator")
  updatedDocuments Document[] @relation("DocumentEditor")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Model Workspace
model Workspace {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  emoji      String?
  coverImage String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  members       WorkspaceMember[]
  documents     Document[]
  conversation  Conversation?
  invitations   Invitation[]
  notifications Notification[]
  meetings      Meeting[]

  @@unique([name])
}

// Model WorkspaceMember
model WorkspaceMember {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  workspaceId String   @db.ObjectId
  role        Role
  joinedAt    DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MEMBER
}

// Model Invitation
model Invitation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String
  role        Role
  workspaceId String   @db.ObjectId
  invitedById String   @db.ObjectId
  invitedAt   DateTime @default(now())
  expiredAt   DateTime

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  invitedBy User      @relation(fields: [invitedById], references: [id], onDelete: Cascade)

  @@unique([email, workspaceId])
  @@index([expiredAt])
}

// Model Document
model Document {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  emoji            String?
  coverImage       String?
  documentContents DocumentContent[]
  updatedAt        DateTime          @updatedAt
  createdAt        DateTime          @default(now())
  createdById      String            @db.ObjectId
  workspaceId      String            @db.ObjectId
  updatedById      String?           @db.ObjectId

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdBy User      @relation("DocumentCreator", fields: [createdById], references: [id])
  updatedBy User?     @relation("DocumentEditor", fields: [updatedById], references: [id])
}

// Model DocumentHistory
model DocumentContent {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  documentId String   @db.ObjectId
  content    Json
  editedAt   DateTime @default(now())
  editedById String   @db.ObjectId

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  editedBy User     @relation(fields: [editedById], references: [id], onDelete: Cascade)
}

// Model Conversation (One group chat per Workspace)
model Conversation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  workspaceId   String    @unique @db.ObjectId // Maintains one-to-one relationship with workspace
  lastMessageAt DateTime  @default(now()) // For sorting and displaying last activity
  messages      Message[]
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

// Modified Model Message
model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  body           String? // Optional to allow image-only messages
  image          String? // Allow images in messages
  conversationId String       @db.ObjectId
  senderId       String       @db.ObjectId
  createdAt      DateTime     @default(now())
  // Users who have seen this message
  seenIds        String[]     @db.ObjectId
  seenBy         User[]       @relation("MessageSeen", fields: [seenIds], references: [id])
  sender         User         @relation(fields: [senderId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

// Model Notification
// Model Notification
model Notification {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  workspaceId String             @db.ObjectId
  message     String
  type        NotificationType
  createdAt   DateTime           @default(now())
  userId      String?            @db.ObjectId // The user who triggered the notification
  documentId  String?            @db.ObjectId // Optional reference to a document
  readBy      NotificationRead[]

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([userId])
}

//model NotificationRead
model NotificationRead {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  notificationId String   @db.ObjectId
  userId         String   @db.ObjectId
  readAt         DateTime @default(now())

  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([notificationId, userId])
  @@index([userId])
  @@index([notificationId])
}

enum NotificationType {
  WORKSPACE_UPDATE
  MEMBER_CREATE
  MEMBER_UPDATE
  MEMBER_DELETE
  MEMBER_LEAVE
  INVITATION_CREATE
  INVITATION_REVOKE
  DOCUMENT_CREATE
  DOCUMENT_UPDATE
  DOCUMENT_DELETE
  DOCUMENT_CONTENT_UPDATE
  MEETING_CREATE
  MEETING_UPDATE
  MEETING_DELETE
  MESSAGE_RECEIVED
}

// Model Meeting
model Meeting {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String?
  startDateTime    DateTime
  endDateTime      DateTime
  meetingLink      String?
  googleCalendarId String?  @unique
  googleEventId    String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  workspaceId      String   @db.ObjectId
  createdById      String   @db.ObjectId

  workspace Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdBy User              @relation("MeetingCreator", fields: [createdById], references: [id])
  attendees MeetingAttendee[]

  @@index([workspaceId])
  @@index([createdById])
}

// Model MeetingAttendee
model MeetingAttendee {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  meetingId String         @db.ObjectId
  userId    String         @db.ObjectId
  status    AttendeeStatus @default(PENDING)
  addedAt   DateTime       @default(now())

  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([meetingId, userId])
}

enum AttendeeStatus {
  PENDING
  ACCEPTED
  DECLINED
  TENTATIVE
}
